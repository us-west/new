//// 8 queen ///

import json
x=[20,21,22,23,24,25,26,27,28]
n=8
global flag
def Queen(k):
	global flag
	for i in range(1,n+1):
		if (Place(k,i)==True):
			x[k]=i;
			if(k==n):
				if(flag==0):
					print("\nSolutions that satisfy the given condition are:\n")
				print x[1:n+1]
				flag=1
			else:
				Queen(k+1)

def Place(k,i):
	for j in range (1,k):
		if((x[j]==i) or (abs(x[j]-i)==abs(j-k))):
			return False
	return True
	
data=[]
flag=0
with open('input.json') as f:
	data=json.load(f)
    
if(data["start"]<1 or data["start"]>8):
	print "\nInvalid JSON input.\n"
        exit()

print "\nGiven condition: First queen is placed in column ",data["start"],".\n"
x[1]=data["start"]      
Queen(2)
if(flag==0):
	print("\nNo solution satisfying the given conditon is found.\n")

print("\n")


/// odd even ///


import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
	
	ServerSocket ss;
	Socket s;
	static int n;
	static int array[];
	DataInputStream din;
	DataOutputStream dout;
	static StringBuilder sb;
	static StringBuilder result;
	
	void establishconnection()
	{
		try{
			 ss = new ServerSocket(8877);
			 s=ss.accept();
			 
			 din = new DataInputStream(s.getInputStream());
			 dout = new DataOutputStream(s.getOutputStream());
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	void getData()
	{
		try{
			
			String str = din.readUTF();
			n = Integer.parseInt(str);
			array = new int[n];
			for(int i=0 ; i<n ;i++)
			{
				String strr = din.readUTF();
				array[i]= Integer.parseInt(strr);
			}
			
			
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	void sendresult()
	{
		try
		{
			dout.writeUTF(sb.toString());
			dout.writeUTF(result.toString());
			dout.flush();
			dout.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
	
	

	public static void main(String[] args) {
		Server s1 = new Server();
		s1.establishconnection();
		s1.getData();
		sb = new StringBuilder();
		result = new StringBuilder();
		for(int i=0 ;i< n ;i++)
		{
			sb.append(" "+array[i]);
		}
		s1.odd_even_sort(array,n);
		for(int i=0 ;i< n ;i++)
		{
			result.append(" "+array[i]);
		}
		s1.sendresult();
	}

	void odd_even_sort(int[] arr , int len)
	{
		for(int i=0 ; i<n ;i++)
		{
			for(int j=0 ; j<n-1 ; j+=2)
			{
				Runnable t1 = new mythread(array, j);
				Thread t2 = new Thread(t1);
				t2.start();
				
			}
			for(int j=1 ; j<n-1;j+=2)
			{
				Runnable t3 = new mythread(array, j);
				Thread t4 = new Thread(t3);
				t4.start();
			}
		}
	}
	
}
class mythread implements Runnable
{
int arr[];
int j;
	mythread(int [] arr, int j)
	{
		this.arr=arr;
		this.j=j;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		if(arr[j]>arr[j+1])
		{
			int t = arr[j];
			arr[j]=arr[j+1];
			arr[j+1]=t;
		}
	}
	
}

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="sort22.jsp">
<center>Enter the Elements</center>
<br><br>
<center><input type="text" name="numbers" ></center>
<center><input type="submit" value="sort"></center>


</form>
</body>
</html>

<%@ page import= "java.net.* , java.io.* , java.lang.*" language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<%
  try{
	Socket s = new Socket("localhost", 8877);
	DataInputStream din = new DataInputStream(s.getInputStream());
	DataOutputStream dout = new DataOutputStream(s.getOutputStream());
	
	String str = request.getParameter("numbers");
	String stra[] = str.split(" ");
	Integer n = stra.length;
	dout.writeUTF(n.toString());
	dout.flush();
	
	for(int i=0 ;i<n ; i++)
	{
		dout.writeUTF(stra[i]);
		dout.flush();
		
	}
	dout.flush();
	
	String strr;
	
	try
	{
		while(din.available()==0)
		{
			out.print("Original Array");
			strr = din.readUTF();
			out.print(strr);
			%>
			<br><br>
			<% 
			out.print("Sorted Arrray");
			strr = din.readUTF();
			out.print(strr);
			din.close();
		}
	}
	catch(Exception e)
	{
		
	}
	dout.close();
	s.close();
  }
	catch(ConnectException e)
	{
		%>
		Please Connect to Server...
		<% 
	}

%>

</body>
</html>

/// DPP ///
#include<stdio.h>
#include<semaphore.h>
#include<pthread.h>
  
#define N 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (ph_num+4)%N
#define RIGHT (ph_num+1)%N
  
sem_t mutex;
sem_t S[N];
  
void *philospher(void *num);
void take_fork(int);
void put_fork(int);
void test(int);
  
int state[N];
int phil_num[N]={0,1,2,3,4};
  
int main()
{
    int i;
    pthread_t thread_id[N];
    sem_init(&mutex,0,1);
    for(i=0;i<N;i++)
        sem_init(&S[i],0,0);
    for(i=0;i<N;i++)
    {
        pthread_create(&thread_id[i],NULL,philospher,&phil_num[i]);
        printf("Philosopher %d is thinking\n",i+1);
    }
    for(i=0;i<N;i++)
        pthread_join(thread_id[i],NULL);
}
  
void *philospher(void *num)
{
    //while(1)
    //{
        int *i = num;
        sleep(1);
        take_fork(*i);
        sleep(0);
        put_fork(*i);
    //}
}
  
void take_fork(int ph_num)
{
    sem_wait(&mutex); //if negative wait 
    state[ph_num] = HUNGRY;
    printf("Philosopher %d is Hungry\n",ph_num+1);
    test(ph_num);
    sem_post(&mutex);
    sem_wait(&S[ph_num]);
    sleep(1);
}
  
void test(int ph_num)
{
    if (state[ph_num] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING)
    {
        state[ph_num] = EATING;
        sleep(2);
        printf("Philosopher %d takes fork %d and %d\n",ph_num+1,LEFT+1,ph_num+1);
        printf("Philosopher %d is Eating\n",ph_num+1);
        sem_post(&S[ph_num]);
    }
}
  
void put_fork(int ph_num)
{
    sem_wait(&mutex);
    state[ph_num] = THINKING;
    printf("Philosopher %d putting fork %d and %d down\n",ph_num+1,LEFT+1,ph_num+1);
    printf("Philosopher %d is thinking\n",ph_num+1);
    test(LEFT);
    test(RIGHT);
    sem_post(&mutex);
}
// booths///
package org.mit;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;



/**
 * Servlet implementation class BoothP
 */
@WebServlet("/BoothP")
public class BoothP extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public BoothP() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		int Multiplicand = Integer.parseInt(request.getParameter("Multiplicand"));
		int Multiplier = Integer.parseInt(request.getParameter("Multiplier"));
		BoothP multiply = new BoothP();
		int multiplication = multiply.Multiply(Multiplicand,Multiplier);
		System.out.println(multiplication);
		response.getWriter().print(multiplication);
	}
	
	public int Multiply(int a,int b){
		int len1 = 1+Integer.toBinaryString(Math.abs(a)).length();
		int len2 = 1+Integer.toBinaryString(Math.abs(b)).length();
		
		int[] m1 = new int[len1]; //Multiplicand
		int[] m2 = new int[len2]; //Multiplier	
		int[] n1 = new int[len1];
		
		m1 = convert(a);
		m2 = convert(b);
		n1 = convert(-a);
				
		int z = len1+len2+1;
		
		int[] A = new int[z];
		int[] S = new int[z];
		int[] P = new int[z];
		
		for(int i=0;i<len1;i++){
			A[i] = m1[i];
			S[i] = n1[i];
		}
		
        for(int i=0;i<len2;i++){
        	P[i + len1] = m2[i];
        }
		
		for(int i=0;i<len2;i++){
			if(P[z-2]==1 && P[z-1]==0){
				P = add(P,S);
			}
			else if(P[z-2]==0 && P[z-1]==1){
				P = add(P,A);
			}
			P = rightShift(P);	
		}
		
		int ans =Answer(P);
		return ans;
	}
	

	public int[] convert(int num){
		int length = 1+Integer.toBinaryString(Math.abs(num)).length();
		String binary = "";
		if(num>=0){
			binary = "0"+Integer.toBinaryString(num);
		}
		if(num<0){
			int negLen = Integer.toBinaryString(num).length();
			binary = Integer.toBinaryString(num).substring(negLen-length,negLen);
		}
		int[] binaryArray = new int[length];
		binaryArray = convertToArray(binary);
		return binaryArray;
	}
	
	public int[] convertToArray(String binary){
		String[] stringArray = binary.split("");
		int[] binaryArray = new int[stringArray.length];
		
		for(int i=0;i<stringArray.length;i++){
			binaryArray[i] = Integer.parseInt(stringArray[i]); 
		}
		return binaryArray;
	}
	
	public int[] rightShift(int[] P){
		for(int i=P.length-1;i>0;i--){
			P[i] = P[i-1];
		}
		return P;
	}
	
	public int[] add(int[] m1,int[] m2){
		int[] sum = new int[m1.length];

		int carry=0;
		for(int i=m1.length-1;i>=0;i--){
			sum[i] =(m1[i]+m2[i]+carry)%2;
			carry = (m1[i]+m2[i]+carry)/2;
		}
		return sum;
	}
	
	public int Answer(int[] P){
		StringBuilder ans = new StringBuilder();
		int multiplication=0;
		if(P[0]==1){
			for(int i=1;i<P.length-1;i++){
				if(P[i]==1){
					ans.append("0");
				}
				else{
					ans.append("1");
				}
			}
			multiplication = -(Integer.parseInt(ans.toString(), 2)+1);
		
		}
		else{
			for(int i=1;i<P.length-1;i++){
				ans.append(P[i]);
			}
			multiplication = Integer.parseInt(ans.toString(),2);
		}
		return multiplication;
	}
	

}
///KVM//
import subprocess
import Tkinter
import tkMessageBox
from Tkinter import *
from tkMessageBox import *
import os


root = Tk()

Label(root, text="Virtual Machine Name", padx=30).grid(row=0)
Label(root, text="RAM Size",padx=30).grid(row=1)
Label(root, text="ISO path",padx=30).grid(row=2)
Label(root, text="Filename",padx=30).grid(row=3)
Label(root, text="VMID to destroy",padx=30).grid(row=5)

e1=Entry(root)
e1.grid(row = 0,column =1 ,padx =30,pady=5)
e2=Entry(root)
e2.grid(row=1,column=1,padx = 30,pady=5)
e3=Entry(root)
e3.grid(row=2,column=1,padx=30,pady=5)
e4=Entry(root)
e4.grid(row=3,column=1,padx=30,pady=5)
e5=Entry(root)
e5.grid(row=5,column=1,padx=30,pady=5)




def toDestroy():
	VMid = e5.get()
	if VMid=="":
		showerror("Error","Empty parameter")
	else:	
		cmd="virsh destroy "+VMid+""
		y= subprocess.check_output("Message",y)


def listvm():
	cmd="virsh -c qemu:///system list"
	x= subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("VMs",x)

	
def createVM():
	VMname = e1.get()
	rsize = e2.get()
	isopath = e3.get()
	filename = e4.get()

	if (VMname == "" or rsize== "" or isopath == "" or filename ==""):
		showerror("Error","EMpty Parameters")
	else:
		str1 = "/home/harshabh/VMDirectories"
		cmd1 = "touch /home/harshabh/VMDirectories/"+filename+""

		if(os.path.exists(str1)):
			os.system(cmd1)

		else:
			cmd2="mkdir "+str1+""
			os.system(cmd2)
			os.system(cmd1)

		showinfo("Message","File Created")	
		cmd="virt-install -n "+VMname+" --os-type=Linux --ram="+rsize+" --vcpus=1 --disk path="+filename+",bus=virtio,size=10 --graphics spice --cdrom "+isopath+""
		os.system(cmd)

Button(root,text="Create", command= createVM ).grid(row=4,column=1,padx=30,pady=5)
Button(root,text="ShowVMs",command= listvm ).grid(row=4,column=0,padx=30,pady=5)
Button(root,text="Quit",command= root.quit ).grid(row=4,column=2,padx=30,pady=5)
Button(root,text="Destroy",command= toDestroy ).grid(row=5,column=2,padx=30,pady=5)
mainloop()

///s3////
import Tkinter
from Tkinter import *
import subprocess
from subprocess import call
import tkMessageBox

top = Tkinter.Tk()

def main():
	l1= Tkinter.Label(top,text = "Click button to perform operation on bucket",height =4,width = 30, bg="black",fg="white").pack()
	b1= Tkinter.Button(top,text="view bucket list",command=view,height = 2,width = 20).pack()
	b2= Tkinter.Button(top,text="Create Bucket",command=create,height = 2,width = 20).pack()
	b3= Tkinter.Button(top,text="view content of bucket",command=content,height = 2,width = 20).pack()
	b4= Tkinter.Button(top,text="upload file",command=upload,height = 2,width = 20).pack()
	b5= Tkinter.Button(top,text="download file",command=download,height = 2,width = 20).pack()
	b6= Tkinter.Button(top,text="delete file",command=deletefile,height = 2,width = 20).pack()
	b7= Tkinter.Button(top,text="delete Bucket",command=deleteB,height = 2,width = 20).pack()
	b8= Tkinter.Button(top,text="Exit",command=view,height = 2,width = 20).pack()
	top.minsize(height=333,width=333)
	top.mainloop()
def deletefile():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the src of file",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()
	
	b1 = Tkinter.Button(top1,text="Delete", command = lambda : deleteF(top1,e1.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def deleteF(t,src):

	cmd = "aws s3 rm s3:/%s"%(src)
	x  = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()
def download():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the src of file",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()
	
	l2 = Tkinter.Label(top1,text="Enter the dest of file",height=4,width=30).pack()
	e2 = Tkinter.Entry(top1)
	e2.pack()
	b1 = Tkinter.Button(top1,text="Download", command = lambda : downloadBuck(top1,e1.get(),e2.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def downloadBuck(t,src,dest):
	cmd = "aws s3 cp s3:/%s %s"%(src,dest)
	x  = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()

def upload():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the src of file",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()
	
	l2 = Tkinter.Label(top1,text="Enter the bucket name",height=4,width=30).pack()
	e2 = Tkinter.Entry(top1)
	e2.pack()
	b1 = Tkinter.Button(top1,text="Upload", command = lambda : uploadBuck(top1,e1.get(),e2.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def uploadBuck(t,src,dest):
	cmd = "aws s3 cp %s s3:/%s"%(src,dest)
	x  = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()
def deleteB():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the name of bucket",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()
	
	b1 = Tkinter.Button(top1,text="Delete", command = lambda : deleteBuck(top1,e1.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def deleteBuck(t,src):
	cmd = "aws s3api delete-bucket --bucket %s --region us-west-2"%(src)
	x = subprocess.check_output(cmd.split())
	cmd = "aws s3 ls"
	x = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("List of Buckets",x)
	t.destroy()


def view():
	cmd = "aws s3 ls"
	x = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("List of Buckets",x)

def create():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the name of bucket",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()

	b1 = Tkinter.Button(top1,text="Create", command = lambda : createBuck(top1,e1.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def createBuck(t,name):
	cmd = "aws s3api create-bucket --bucket %s --region us-west-2"%(name)
	x = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()

def content():
	top1=Toplevel()
	top1.minsize(height = 200 , width = 300)
	l1 = Tkinter.Label(top1,text="Enter the name of bucket", height =4 ,width =30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()

	b1=Tkinter.Button(top1,text="View",command = lambda : viewcontent(top1,e1.get()),height = 2, width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def viewcontent(t,src):
	cmd = "aws s3 ls %s"%(src)
	x = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()
def back(t):
	t.destroy()
if __name__ == '__main__':main()