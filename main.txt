////////////////////////// 8 queen ////////////////////////

import json
x=[20,21,22,23,24,25,26,27,28]
n=8
global flag
def Queen(k):
	global flag
	for i in range(1,n+1):
		if (Place(k,i)==True):
			x[k]=i;
			if(k==n):
				if(flag==0):
					print("\nSolutions that satisfy the given condition are:\n")
				print x[1:n+1]
				flag=1
			else:
				Queen(k+1)

def Place(k,i):
	for j in range (1,k):
		if((x[j]==i) or (abs(x[j]-i)==abs(j-k))):
			return False
	return True
	
data=[]
flag=0
with open('input.json') as f:
	data=json.load(f)
    
if(data["start"]<1 or data["start"]>8):
	print "\nInvalid JSON input.\n"
        exit()

print "\nGiven condition: First queen is placed in column ",data["start"],".\n"
x[1]=data["start"]      
Queen(2)
if(flag==0):
	print("\nNo solution satisfying the given conditon is found.\n")

print("\n")


/////odd even server //////////////////////////////////////


import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
	
	ServerSocket ss;
	Socket s;
	static int n;
	static int array[];
	DataInputStream din;
	DataOutputStream dout;
	static StringBuilder sb;
	static StringBuilder result;
	
	void establishconnection()
	{
		try{
			 ss = new ServerSocket(8877);
			 s=ss.accept();
			 
			 din = new DataInputStream(s.getInputStream());
			 dout = new DataOutputStream(s.getOutputStream());
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	void getData()
	{
		try{
			
			String str = din.readUTF();
			n = Integer.parseInt(str);
			array = new int[n];
			for(int i=0 ; i<n ;i++)
			{
				String strr = din.readUTF();
				array[i]= Integer.parseInt(strr);
			}
			
			
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	void sendresult()
	{
		try
		{
			dout.writeUTF(sb.toString());
			dout.writeUTF(result.toString());
			dout.flush();
			dout.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
	
	

	public static void main(String[] args) {
		Server s1 = new Server();
		s1.establishconnection();
		s1.getData();
		sb = new StringBuilder();
		result = new StringBuilder();
		for(int i=0 ;i< n ;i++)
		{
			sb.append(" "+array[i]);
		}
		s1.odd_even_sort(array,n);
		for(int i=0 ;i< n ;i++)
		{
			result.append(" "+array[i]);
		}
		s1.sendresult();
	}

	void odd_even_sort(int[] arr , int len)
	{
		for(int i=0 ; i<n ;i++)
		{
			for(int j=0 ; j<n-1 ; j+=2)
			{
				Runnable t1 = new mythread(array, j);
				Thread t2 = new Thread(t1);
				t2.start();
				
			}
			for(int j=1 ; j<n-1;j+=2)
			{
				Runnable t3 = new mythread(array, j);
				Thread t4 = new Thread(t3);
				t4.start();
			}
		}
	}
	
}
class mythread implements Runnable
{
int arr[];
int j;
	mythread(int [] arr, int j)
	{
		this.arr=arr;
		this.j=j;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		if(arr[j]>arr[j+1])
		{
			int t = arr[j];
			arr[j]=arr[j+1];
			arr[j+1]=t;
		}
	}
	
}

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="sort22.jsp">
<center>Enter the Elements</center>
<br><br>
<center><input type="text" name="numbers" ></center>
<center><input type="submit" value="sort"></center>


</form>
</body>
</html>

<%@ page import= "java.net.* , java.io.* , java.lang.*" language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<%
  try{
	Socket s = new Socket("localhost", 8877);
	DataInputStream din = new DataInputStream(s.getInputStream());
	DataOutputStream dout = new DataOutputStream(s.getOutputStream());
	
	String str = request.getParameter("numbers");
	String stra[] = str.split(" ");
	Integer n = stra.length;
	dout.writeUTF(n.toString());
	dout.flush();
	
	for(int i=0 ;i<n ; i++)
	{
		dout.writeUTF(stra[i]);
		dout.flush();
		
	}
	dout.flush();
	
	String strr;
	
	try
	{
		while(din.available()==0)
		{
			out.print("Original Array");
			strr = din.readUTF();
			out.print(strr);
			%>
			<br><br>
			<% 
			out.print("Sorted Arrray");
			strr = din.readUTF();
			out.print(strr);
			din.close();
		}
	}
	catch(Exception e)
	{
		
	}
	dout.close();
	s.close();
  }
	catch(ConnectException e)
	{
		%>
		Please Connect to Server...
		<% 
	}

%>

</body>
</html>

///////////////////////////////////////// DPP ////////////////
#include<stdio.h>
#include<semaphore.h>
#include<pthread.h>
  
#define N 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (ph_num+4)%N
#define RIGHT (ph_num+1)%N
  
sem_t mutex;
sem_t S[N];
  
void *philospher(void *num);
void take_fork(int);
void put_fork(int);
void test(int);
  
int state[N];
int phil_num[N]={0,1,2,3,4};
  
int main()
{
    int i;
    pthread_t thread_id[N];
    sem_init(&mutex,0,1);
    for(i=0;i<N;i++)
        sem_init(&S[i],0,0);
    for(i=0;i<N;i++)
    {
        pthread_create(&thread_id[i],NULL,philospher,&phil_num[i]);
        printf("Philosopher %d is thinking\n",i+1);
    }
    for(i=0;i<N;i++)
        pthread_join(thread_id[i],NULL);
}
  
void *philospher(void *num)
{
    //while(1)
    //{
        int *i = num;
        sleep(1);
        take_fork(*i);
        sleep(0);
        put_fork(*i);
    //}
}
  
void take_fork(int ph_num)
{
    sem_wait(&mutex); //if negative wait 
    state[ph_num] = HUNGRY;
    printf("Philosopher %d is Hungry\n",ph_num+1);
    test(ph_num);
    sem_post(&mutex);
    sem_wait(&S[ph_num]);
    sleep(1);
}
  
void test(int ph_num)
{
    if (state[ph_num] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING)
    {
        state[ph_num] = EATING;
        sleep(2);
        printf("Philosopher %d takes fork %d and %d\n",ph_num+1,LEFT+1,ph_num+1);
        printf("Philosopher %d is Eating\n",ph_num+1);
        sem_post(&S[ph_num]);
    }
}
  
void put_fork(int ph_num)
{
    sem_wait(&mutex);
    state[ph_num] = THINKING;
    printf("Philosopher %d putting fork %d and %d down\n",ph_num+1,LEFT+1,ph_num+1);
    printf("Philosopher %d is thinking\n",ph_num+1);
    test(LEFT);
    test(RIGHT);
    sem_post(&mutex);
}
///////////////////////////////////////////////// booths///
package org.mit;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;



/**
 * Servlet implementation class BoothP
 */
@WebServlet("/BoothP")
public class BoothP extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public BoothP() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		int Multiplicand = Integer.parseInt(request.getParameter("Multiplicand"));
		int Multiplier = Integer.parseInt(request.getParameter("Multiplier"));
		BoothP multiply = new BoothP();
		int multiplication = multiply.Multiply(Multiplicand,Multiplier);
		System.out.println(multiplication);
		response.getWriter().print(multiplication);
	}
	
	public int Multiply(int a,int b){
		int len1 = 1+Integer.toBinaryString(Math.abs(a)).length();
		int len2 = 1+Integer.toBinaryString(Math.abs(b)).length();
		
		int[] m1 = new int[len1]; //Multiplicand
		int[] m2 = new int[len2]; //Multiplier	
		int[] n1 = new int[len1];
		
		m1 = convert(a);
		m2 = convert(b);
		n1 = convert(-a);
				
		int z = len1+len2+1;
		
		int[] A = new int[z];
		int[] S = new int[z];
		int[] P = new int[z];
		
		for(int i=0;i<len1;i++){
			A[i] = m1[i];
			S[i] = n1[i];
		}
		
        for(int i=0;i<len2;i++){
        	P[i + len1] = m2[i];
        }
		
		for(int i=0;i<len2;i++){
			if(P[z-2]==1 && P[z-1]==0){
				P = add(P,S);
			}
			else if(P[z-2]==0 && P[z-1]==1){
				P = add(P,A);
			}
			P = rightShift(P);	
		}
		
		int ans =Answer(P);
		return ans;
	}
	

	public int[] convert(int num){
		int length = 1+Integer.toBinaryString(Math.abs(num)).length();
		String binary = "";
		if(num>=0){
			binary = "0"+Integer.toBinaryString(num);
		}
		if(num<0){
			int negLen = Integer.toBinaryString(num).length();
			binary = Integer.toBinaryString(num).substring(negLen-length,negLen);
		}
		int[] binaryArray = new int[length];
		binaryArray = convertToArray(binary);
		return binaryArray;
	}
	
	public int[] convertToArray(String binary){
		String[] stringArray = binary.split("");
		int[] binaryArray = new int[stringArray.length];
		
		for(int i=0;i<stringArray.length;i++){
			binaryArray[i] = Integer.parseInt(stringArray[i]); 
		}
		return binaryArray;
	}
	
	public int[] rightShift(int[] P){
		for(int i=P.length-1;i>0;i--){
			P[i] = P[i-1];
		}
		return P;
	}
	
	public int[] add(int[] m1,int[] m2){
		int[] sum = new int[m1.length];

		int carry=0;
		for(int i=m1.length-1;i>=0;i--){
			sum[i] =(m1[i]+m2[i]+carry)%2;
			carry = (m1[i]+m2[i]+carry)/2;
		}
		return sum;
	}
	
	public int Answer(int[] P){
		StringBuilder ans = new StringBuilder();
		int multiplication=0;
		if(P[0]==1){
			for(int i=1;i<P.length-1;i++){
				if(P[i]==1){
					ans.append("0");
				}
				else{
					ans.append("1");
				}
			}
			multiplication = -(Integer.parseInt(ans.toString(), 2)+1);
		
		}
		else{
			for(int i=1;i<P.length-1;i++){
				ans.append(P[i]);
			}
			multiplication = Integer.parseInt(ans.toString(),2);
		}
		return multiplication;
	}
	

}
/////////////////////////////////////////////////////KVM//
import subprocess
import Tkinter
import tkMessageBox
from Tkinter import *
from tkMessageBox import *
import os


root = Tk()

Label(root, text="Virtual Machine Name", padx=30).grid(row=0)
Label(root, text="RAM Size",padx=30).grid(row=1)
Label(root, text="ISO path",padx=30).grid(row=2)
Label(root, text="Filename",padx=30).grid(row=3)
Label(root, text="VMID to destroy",padx=30).grid(row=5)

e1=Entry(root)
e1.grid(row = 0,column =1 ,padx =30,pady=5)
e2=Entry(root)
e2.grid(row=1,column=1,padx = 30,pady=5)
e3=Entry(root)
e3.grid(row=2,column=1,padx=30,pady=5)
e4=Entry(root)
e4.grid(row=3,column=1,padx=30,pady=5)
e5=Entry(root)
e5.grid(row=5,column=1,padx=30,pady=5)




def toDestroy():
	VMid = e5.get()
	if VMid=="":
		showerror("Error","Empty parameter")
	else:	
		cmd="virsh destroy "+VMid+""
		y= subprocess.check_output("Message",y)


def listvm():
	cmd="virsh -c qemu:///system list"
	x= subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("VMs",x)

	
def createVM():
	VMname = e1.get()
	rsize = e2.get()
	isopath = e3.get()
	filename = e4.get()

	if (VMname == "" or rsize== "" or isopath == "" or filename ==""):
		showerror("Error","EMpty Parameters")
	else:
		str1 = "/home/harshabh/VMDirectories"
		cmd1 = "touch /home/harshabh/VMDirectories/"+filename+""

		if(os.path.exists(str1)):
			os.system(cmd1)

		else:
			cmd2="mkdir "+str1+""
			os.system(cmd2)
			os.system(cmd1)

		showinfo("Message","File Created")	
		cmd="virt-install -n "+VMname+" --os-type=Linux --ram="+rsize+" --vcpus=1 --disk path="+filename+",bus=virtio,size=10 --graphics spice --cdrom "+isopath+""
		os.system(cmd)

Button(root,text="Create", command= createVM ).grid(row=4,column=1,padx=30,pady=5)
Button(root,text="ShowVMs",command= listvm ).grid(row=4,column=0,padx=30,pady=5)
Button(root,text="Quit",command= root.quit ).grid(row=4,column=2,padx=30,pady=5)
Button(root,text="Destroy",command= toDestroy ).grid(row=5,column=2,padx=30,pady=5)
mainloop()

////////////////////////////////////////////////////////s3////
import Tkinter
from Tkinter import *
import subprocess
from subprocess import call
import tkMessageBox

top = Tkinter.Tk()

def main():
	l1= Tkinter.Label(top,text = "Click button to perform operation on bucket",height =4,width = 30, bg="black",fg="white").pack()
	b1= Tkinter.Button(top,text="view bucket list",command=view,height = 2,width = 20).pack()
	b2= Tkinter.Button(top,text="Create Bucket",command=create,height = 2,width = 20).pack()
	b3= Tkinter.Button(top,text="view content of bucket",command=content,height = 2,width = 20).pack()
	b4= Tkinter.Button(top,text="upload file",command=upload,height = 2,width = 20).pack()
	b5= Tkinter.Button(top,text="download file",command=download,height = 2,width = 20).pack()
	b6= Tkinter.Button(top,text="delete file",command=deletefile,height = 2,width = 20).pack()
	b7= Tkinter.Button(top,text="delete Bucket",command=deleteB,height = 2,width = 20).pack()
	b8= Tkinter.Button(top,text="Exit",command=view,height = 2,width = 20).pack()
	top.minsize(height=333,width=333)
	top.mainloop()
def deletefile():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the src of file",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()
	
	b1 = Tkinter.Button(top1,text="Delete", command = lambda : deleteF(top1,e1.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def deleteF(t,src):

	cmd = "aws s3 rm s3:/%s"%(src)
	x  = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()
def download():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the src of file",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()
	
	l2 = Tkinter.Label(top1,text="Enter the dest of file",height=4,width=30).pack()
	e2 = Tkinter.Entry(top1)
	e2.pack()
	b1 = Tkinter.Button(top1,text="Download", command = lambda : downloadBuck(top1,e1.get(),e2.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def downloadBuck(t,src,dest):
	cmd = "aws s3 cp s3:/%s %s"%(src,dest)
	x  = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()

def upload():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the src of file",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()
	
	l2 = Tkinter.Label(top1,text="Enter the bucket name",height=4,width=30).pack()
	e2 = Tkinter.Entry(top1)
	e2.pack()
	b1 = Tkinter.Button(top1,text="Upload", command = lambda : uploadBuck(top1,e1.get(),e2.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def uploadBuck(t,src,dest):
	cmd = "aws s3 cp %s s3:/%s"%(src,dest)
	x  = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()
def deleteB():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the name of bucket",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()
	
	b1 = Tkinter.Button(top1,text="Delete", command = lambda : deleteBuck(top1,e1.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def deleteBuck(t,src):
	cmd = "aws s3api delete-bucket --bucket %s --region us-west-2"%(src)
	x = subprocess.check_output(cmd.split())
	cmd = "aws s3 ls"
	x = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("List of Buckets",x)
	t.destroy()


def view():
	cmd = "aws s3 ls"
	x = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("List of Buckets",x)

def create():
	top1 = Toplevel() 
	top1.minsize(height = 200 ,width =200)
	#top1.setfocus()

	l1 = Tkinter.Label(top1,text="Enter the name of bucket",height=4,width=30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()

	b1 = Tkinter.Button(top1,text="Create", command = lambda : createBuck(top1,e1.get()),height= 2 ,width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def createBuck(t,name):
	cmd = "aws s3api create-bucket --bucket %s --region us-west-2"%(name)
	x = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()

def content():
	top1=Toplevel()
	top1.minsize(height = 200 , width = 300)
	l1 = Tkinter.Label(top1,text="Enter the name of bucket", height =4 ,width =30).pack()
	e1 = Tkinter.Entry(top1)
	e1.pack()

	b1=Tkinter.Button(top1,text="View",command = lambda : viewcontent(top1,e1.get()),height = 2, width =20).pack()

	b2 = Tkinter.Button(top1,text="Back" , command = lambda : back(top1),height = 2,width =20).pack()

def viewcontent(t,src):
	cmd = "aws s3 ls %s"%(src)
	x = subprocess.check_output(cmd.split())
	tkMessageBox.showinfo("Message",x)
	t.destroy()
def back(t):
	t.destroy()
if __name__ == '__main__':main()

///////////////////////////////////quicksort//////////////////
#include<iostream>
#include<omp.h>
#include<cstdlib>
class quicksort
{
	int *array;
	int size;
  public:
	quicksort()
	{
	 std::cout<<"\nEnter the elements to be sorted";
	 std::cin>>size;
	array = new int[size];
	
	std::cout<<"enter the elements";
	for(int i=0 ; i<size ; i++)
	{
		std::cin>>array[i];
	}
	

	}

	void quicksort1(int ,int);
	int partition(int ,int);
	void displayoutput();
	void quick();
    


};
void quicksort::quick()
{
 quicksort1(0,size-1);
}
int quicksort::partition(int l,int h)
{
	int p=array[h];
	int i=l-1;
	int t;
	for(int j=l ; j<size ;j++)
	{
		if(array[j]<p)
		{
			i++;
			t=array[i];
			array[i]=array[j];
			array[j]=t;

		}

	}
	t= array[i+1];
	array[i+1]=array[h];
	array[h]=t;

 return i+1;

}
void quicksort::quicksort1(int l, int h)
{
 if(l<h)
	{
		int p= partition(l,h);
		#pragma omp parallel sections
		{
			
			#pragma omp section
			{
				int t = omp_get_thread_num();
				std::cout<<"\nThread "<<t <<" is executing from "<<l <<" to "<<p-1;
				quicksort1(l,p-1);

			}
			#pragma omp section
			{
				int t1 = omp_get_thread_num();
				std::cout<<"\nThread "<<t1 <<" is executing from "<<p+1 <<" to "<<h;
				quicksort1(p+1,h);

			}
		}

	}

}
 void quicksort::displayoutput()
{
 for(int i=0 ;i<size ;i++)
{
	std::cout<<array[i]<<" ";
}
}
int main()
{
	omp_set_nested(1);
	omp_set_num_threads(4);
	quicksort qs;
	qs.quick();
	qs.displayoutput();
}

///////////////////////////binary/////////////////////////////
<html>

<script>

function binary()
{
	var n = parseInt(prompt("Enter the number of elements"));
	var array = new Array(n);
		var p=0;
	for(var i=0; i<array.length ; i++)
	{
		array[i]=parseInt(prompt("Enter the element "+i));

	}
	document.write("Entered array is:");
	document.write("<br><br>");
	for(var i=0; i<array.length ; i++)
	{
		document.write(array[i]+" ");

	}
	array.sort(function(a,b){return a-b});
	document.write("<br><br>");
	document.write("Sorted array is:");
	document.write("<br><br>");
	for(var i=0; i<array.length ; i++)
	{
		document.write(array[i]+" ");

	}
	var k = parseInt(prompt("Enter the key to be searched:"));
	var l=0;

	var h=parseInt(array.length-1);
	

	while(l<=h)
	{
		var m =parseInt((l+h)/2);
		if(k==array[m])
		{
			p=1;
			break;
		}
		else if(k<array[m])
		{
			h=m-1;

		}
		else if(k>array[m])
		{
			l=m+1;
		}
		
	}
	if(p==1)
	{
		m=m+1;
		document.write("Element found at position "+m);
	}
	else
	{

		document.write("Element not found");
	}

}


</script>
<body onLoad="binary();"></body>
</html>

//////////////////////////////////////////////////////calci///
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<h2><marquee>This is Calculator app on CLoud Foundry</marquee></h2>
<center>
<h1>CALCUALTOR</h1>

<element>
	<style type="text/css">
	#calc{height:300px;width:250px;}
	#btn{width:99%;height:40px;font-size:20px;}
	</style>
</element>

<form name="calc">
	<element>
		<table id ="calc" border=2>
		<tr>
			<td colspan=5>
			<input type="text" id="btn" name = "display"
			 onkeypress = "return event.charCode >= 48 && event.charCode <=57">
			 
			 </td>
		</tr>
		<tr>
		<td>   <input type="button" id = "btn" value="1" 
			onClick = "calc.display.value+='1'"></input> </td>
		<td><input type="button" id = "btn" value="2"
		 onClick= "calc.display.value+='2'"></td>
		<td><input type="button" id = "btn" value="3" 
		onClick= "calc.display.value+='3'"></td>
		<td><input type="button" id = "btn" value="+"
		onClick= "calc.display.value+='+'"></td>
		</tr>
		<tr>
		<td>   <input type="button" id = "btn" value="4"
		onClick= "calc.display.value+='4'"></input> </td>
		<td><input type="button" id = "btn" value="5"
		onClick= "calc.display.value+='5'"></td>
		<td><input type="button" id = "btn" value="6"
		onClick= "calc.display.value+='6'"></td>
		<td><input type="button" id = "btn" value="-"
		onClick= "calc.display.value+='-'"></td>			
		</tr>
		<tr>
		<td>   <input type="button" id = "btn" value="7"
		onClick= "calc.display.value+='7'"></input> </td>
		<td><input type="button" id = "btn" value="8"
		onClick= "calc.display.value+='8'"></td>
		<td><input type="button" id = "btn" value="9"
		onClick= "calc.display.value+='9'"></td>
		<td><input type="button" id = "btn" value="*"
		onClick= "calc.display.value+='*'"></td>			
		</tr>
		<tr>
		<td>   <input type="button" id = "btn" value="C"
		onClick= "calc.display.value=''"></input> </td>
		<td><input type="button" id = "btn" value="0"
		onClick= "calc.display.value+='0'"></td>
		<td><input type="button" id = "btn" value="."
		onClick= "calc.display.value+='.'"></td>
		<td><input type="button" id = "btn" value="/"
		onClick= "calc.display.value+='/'"></td>			
		</tr>
		<tr>
		<td>  <input type="button" id = "btn" value="^2"
		onClick= "calc.display.value=Math.pow(calc.display.value,2)"></input> </td>
		<td><input type="button" id = "btn" value="√"
		onClick= "calc.display.value=Math.sqrt(calc.display.value)"></td>
		<td><input type="button" id = "btn" value="1\x"
		onClick= "calc.display.value=1/(calc.display.value)"></td>
		<td><input type="button" id = "btn" value="="
		onClick= "calc.display.value=eval(calc.display.value)"></td>			
		</tr>
		
		</table>
	
	
	</element>


</form>
</center>
</body>
</html>

////////////////////////odd even//////////////////////////
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Odd Even Sort</title>
</head>
<body>

<h1> Odd-Even Sort using CloudFoundry </h1>

<form action="Sort.jsp">

Enter numbers:<input name="nos" id="nos"></input>

<input type="submit" value="Sort"/>
</form>
</body>
</html>


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>odd-even sort</title>
</head>
<body>

<%
	int i,j,temp;
	String nos = request.getParameter("nos"); //take input from html
	String[] s = nos.split(" "); //split and store in array s
	int[] a = new int[s.length]; //calculate number of elements and create array a accordingly
	
	for(i=0;i<s.length;i++)
	{
		a[i]=Integer.parseInt(s[i]);
	}
	
	for(int k=0;k<a.length;k++)  //pass
	{
	 //even sort
		  for(j=0;j<a.length-1;j++)
		  {if(j%2==0)
		  {
			  if(a[j] > a[j+1])
			  {
				  temp=a[j];
				  a[j]=a[j+1];
				  a[j+1]=temp;
			  }
		  }
		  }
	  
	 
	 //odd sort
		  for(j=0;j<a.length-1;j++)
		  {
		  if(j%2!=0)
		  {
			  if(a[j] > a[j+1])
			  {
				  temp=a[j];
				  a[j]=a[j+1];
				  a[j+1]=temp;
			  }
		  }
		  }
	 
	}
	%>
	Sorted Array:
	
	<%
	for(i=0;i<a.length;i++)
	{
%>

	<%= a[i]%>
	
<%//out.println(a[i]); 
 }
   %>

</body>
</html>

//////////////////////////////////////////////////schedule
<!DOCTYPE html>
<html>
<body>
<FORM action="result.jsp" method="post">
Course Name: <INPUT type="text" name="title" id ="title" size="35"><BR>
Course Time: 
<SELECT name="day" id="day">
<OPTION value="Sunday">Sunday</OPTION>
<OPTION value="Monday">Monday</OPTION>
<OPTION value="Tuesday">Tuesday</OPTION>
<OPTION value="Wednesday">Wednesday</OPTION>
<OPTION value="Thursday">Thursday</OPTION>
<OPTION value="Friday">Friday</OPTION>
<OPTION value="Saturday">Saturday</OPTION>
</SELECT>

<SELECT name="starttime" id="starttime">
<OPTION value="8">8:00am</OPTION>
<OPTION value="9">9:00am</OPTION>
<OPTION value="10">10:00am</OPTION>
<OPTION value="11">11:00am</OPTION>
<OPTION value="12">12:00pm</OPTION>
<OPTION value="13">1:00pm</OPTION>
<OPTION value="14">2:00pm</OPTION>
<OPTION value="15">3:00pm</OPTION>
<OPTION value="16">4:00pm</OPTION>
<OPTION value="17">5:00pm</OPTION>
<OPTION value="18">6:00pm</OPTION>
<OPTION value="19">7:00pm</OPTION>
<OPTION value="20">8:00pm</OPTION>
<OPTION value="21">9:00pm</OPTION>
</SELECT> 
to 
<SELECT name="endtime" id="endtime">
<OPTION value="9">9:00am</OPTION>
<OPTION value="10">10:00am</OPTION>
<OPTION value="11">11:00am</OPTION>
<OPTION value="12">12:00pm</OPTION>
<OPTION value="13">1:00pm</OPTION>
<OPTION value="14">2:00pm</OPTION>
<OPTION value="15">3:00pm</OPTION>
<OPTION value="16">4:00pm</OPTION>
<OPTION value="17">5:00pm</OPTION>
<OPTION value="18">6:00pm</OPTION>
<OPTION value="19">7:00pm</OPTION>
<OPTION value="20">8:00pm</OPTION>
<OPTION value="21">9:00pm</OPTION>
<OPTION value="22">10:00pm</OPTION>
</SELECT>
<BR>
<BR>

</FORM>


<button onclick="myFunction()">Add course</button>
<BR>
<BR>
<table border="1">
<TR>
<TH align="center" valign="middle" width="100">Day</TH>
<TH align="center" valign="middle" width="100">Course</TH>
<TH align="center" valign="middle" width="100">Start Time</TH>
<TH align="center" valign="middle" width="100">End Time</TH>
</TR>

<tr>
<td id="tday1"></td>
<td id="tcourse1"></td>
<td id="tstart1"></td>
<td id="tend1"></td>
</tr>
<tr>
<td id="tday2"></td>
<td id="tcourse2"></td>
<td id="tstart2"></td>
<td id="tend2"></td>
</tr>
<tr>
<td id="tday3"></td>
<td id="tcourse3"></td>
<td id="tstart3"></td>
<td id="tend3"></td>
</tr>

</table>


<script>
var count =0;
function myFunction() {
    count = count + 1 ; 
   var x = document.getElementById("title").value;
     var y = document.getElementById("day").value;
     var z = document.getElementById("starttime").value;
     var w = document.getElementById("endtime").value;

if(count==1)
{
      
    	document.getElementById("tday1").innerHTML = y;
        document.getElementById("tcourse1").innerHTML = x;
        document.getElementById("tstart1").innerHTML = z;
        document.getElementById("tend1").innerHTML = w;
}
else if(count==2)
{
	document.getElementById("tday2").innerHTML = y;
        document.getElementById("tcourse2").innerHTML = x;
        document.getElementById("tstart2").innerHTML = z;
        document.getElementById("tend2").innerHTML = w;
}
else
{
	document.getElementById("tday3").innerHTML = y;
        document.getElementById("tcourse3").innerHTML = x;
        document.getElementById("tstart3").innerHTML = z;
        document.getElementById("tend3").innerHTML = w;
}

}
</script>

</body>
</html>
//////////////////////////////////////////////register////////

<html>
<body>
 <title>Registration Form</title>
<h2>Registration Form</h2>
	<form action="" >
			<table>
			<tr>
				<td>First Name *:</td><td><input type="text" id="fname" /></td>
			</tr>
			
			<tr>
				<td>Last Name *	:</td><td><input type="text" id="lname" /></td>
			
			<tr>
				<td>Date of Birth *:</td><td><input type="date of birth" id="dob" /></td>
			
			<tr>
				<td>Email *:</td><td><input type="email" id="email" /></td>
			
			<tr>
				<td>Telephone:</td><td><input type="telephone" id="tel" /></td>
			
			<tr>
				<td>Address *:</td><td><input type="address" id="add" /></td>
			
			<tr>
				<td>Post Code *	:</td><td><input type="postcode" id="ptc" /></td>
			
 		</table>
		
		<button onclick="myFunction()">Submit</button>
		
	</form>
 


 
<script>
var count =0;
function myFunction() {
    count = count + 1 ; 
   var fname = document.getElementById("fname").value;
     var lname = document.getElementById("lname").value;
     var dob = document.getElementById("dob").value;
     var email = document.getElementById("email").value;
	var tel = document.getElementById("tel").value;
     var add = document.getElementById("add").value;
     var ptc = document.getElementById("ptc").value;
	
	document.write("\nREGISTRATION SUCCESSFUL");
		document.write("<br><br><br>");
	document.write("<b>First Name: </b>"+fname);
	document.write("<br><br>");
	document.write("<b>Last Name: </b>"+lname);
	document.write("<br><br>");
	document.write("<b>Date of Birth: </b>"+dob);
	document.write("<br><br>");
	document.write("<b>Email: </b>"+email);
	document.write("<br><br>");
	document.write("<b>Telephone: </b>"+tel);
	document.write("<br><br>");
	document.write("<b>Address: </b>"+add);	
	document.write("<br><br>");
	document.write("<b>Postal Code: </b>"+ptc);
	

	}
</script>
</body>
</html>
